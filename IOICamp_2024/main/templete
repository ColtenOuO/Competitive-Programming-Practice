#include <bits/stdc++.h>
 
#include <ext/pb_ds/assoc_container.hpp>
 
#include <ext/pb_ds/tree_policy.hpp>
 
#define int long long // find by order , order of key
 
using namespace __gnu_pbds;
 
using namespace std;
 
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> order_set;
mt19937_64 mrand(random_device{}());

struct point{
	int val,x,y;
};
 
struct cmp{
	bool operator()(point &a,point &b)
	{
		return a.val < b.val;
	}
};

struct pt{
    int a,b,c;
};

struct set_cmp{
    bool operator() (const pt &a,const pt &b) const{
        if(a.a!=b.a) return a.a<b.a;
        if(a.b!=b.b) return a.b<b.b;
        return a.c<b.c;
    }
};

set<pt,set_cmp> st;

// __builtin_popcountll 
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }
 
    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};